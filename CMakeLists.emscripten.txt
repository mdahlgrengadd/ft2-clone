cmake_minimum_required(VERSION 3.7)

project(ft2-clone)

# Check if we're using Emscripten
if(NOT EMSCRIPTEN)
    message(FATAL_ERROR "This CMakeLists.txt is for Emscripten builds only. Use 'emcmake cmake' to build.")
endif()

# Set output directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/web")

# Define source files (excluding platform-specific and MIDI files)
file(GLOB ft2-clone_SRC
    "${CMAKE_CURRENT_SOURCE_DIR}/src/*.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/gfxdata/*.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/mixer/*.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/scopes/*.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/modloaders/*.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/smploaders/*.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/src/libflac/*.c"
)

# Remove rtmidi files (MIDI not supported in browser)
file(GLOB rtmidi_SRC "${CMAKE_CURRENT_SOURCE_DIR}/src/rtmidi/*.cpp")
list(REMOVE_ITEM ft2-clone_SRC ${rtmidi_SRC})

# Create the executable
add_executable(ft2-clone ${ft2-clone_SRC})

# Set C++ standard for any C++ files
set_property(TARGET ft2-clone PROPERTY CXX_STANDARD 11)

# Include directories
target_include_directories(ft2-clone PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/src/libflac
    ${CMAKE_CURRENT_SOURCE_DIR}/src/mixer
    ${CMAKE_CURRENT_SOURCE_DIR}/src/scopes
)

# Compiler definitions
target_compile_definitions(ft2-clone PRIVATE
    -DNDEBUG
    -DHAS_LIBFLAC
    -D__EMSCRIPTEN__
    # Disable MIDI support for web build
    # -DHAS_MIDI is intentionally excluded
)

# Compiler flags
target_compile_options(ft2-clone PRIVATE
    -O3
    -Wall
    -Wno-unused-result
    -Wno-missing-field-initializers
    -Wno-shift-overflow
    -Wno-strict-aliasing
    -sUSE_SDL=2
)

# Emscripten-specific settings
set(EMSCRIPTEN_LINK_FLAGS 
    -sUSE_SDL=2
    -sALLOW_MEMORY_GROWTH=1
    -sINITIAL_MEMORY=67108864
    -sSTACK_SIZE=1048576
    -sASYNCIFY=1
    -sASYNCIFY_STACK_SIZE=65536
    -sEXPORTED_RUNTIME_METHODS=ccall,cwrap,FS
    -sEXPORTED_FUNCTIONS=_main,_malloc,_free,_refreshModuleDirectory
    -sFORCE_FILESYSTEM=1
    -lidbfs.js
    --embed-file "${CMAKE_CURRENT_SOURCE_DIR}/src/gfxdata/bmp@/"
    --shell-file "${CMAKE_CURRENT_SOURCE_DIR}/web/shell.html"
)

# Add conditional preload files if they exist
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/web/assets")
    list(APPEND EMSCRIPTEN_LINK_FLAGS "--preload-file" "${CMAKE_CURRENT_SOURCE_DIR}/web/assets@/assets")
endif()

if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/web/web_user")
    list(APPEND EMSCRIPTEN_LINK_FLAGS "--preload-file" "${CMAKE_CURRENT_SOURCE_DIR}/web/web_user@/home/web_user")
endif()

# Convert list to string for linker
string(REPLACE ";" " " EMSCRIPTEN_LINK_FLAGS "${EMSCRIPTEN_LINK_FLAGS}")

# Apply linker flags
set_target_properties(ft2-clone PROPERTIES 
    LINK_FLAGS "${EMSCRIPTEN_LINK_FLAGS}"
    SUFFIX ".html"
)

# Create web directory structure
file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/web")
file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/web/assets") 